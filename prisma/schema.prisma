generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @unique @default(uuid())
  name              String
  hashedPassword    String
  hashedRefeshToken String?
  email             String   @unique
  createdAt         DateTime @default(now())
}

model companies {
  id           String   @id @unique @default(uuid())
  shareHolders Json[]
  storeBalance Int      @default(0)
  createdAt    DateTime @default(now())
  testmode     Boolean
  currency     String
  name         String
  owner        String
}

model payments {
  id        String   @id @unique @default(uuid())
  storeId   String
  status    String
  amount    Int
  currency  String
  type      String
  createdAt DateTime @default(now())
  testmode  Boolean
  priceIds  String[]
}

model products {
  id       String  @id @unique @default(uuid())
  storeId  String
  description   String
  testmode Boolean
  name     String
  imageUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model prices {
  id            String  @id @unique @default(uuid())
  productId     String
  storeId       String
  currency      String
  price         Int
  billingPeriod String?
  priceType     String
  testmode      Boolean
  createdAt DateTime @default(now())

}

model checkoutSessions {
  id            String   @id @unique @default(uuid())
  storeId       String
  currency      String
  status        String
  createdAt     DateTime @default(now())
  amount        Int
  billingPeriod String?
  testmode      Boolean
  type          String
  trialPeriod   Int?
  cancelUrl     String
  companyName   String
  description   String?
  expiry        DateTime
  productNames  Json[]
  successUrl    String
  priceIds      String[]
  productIds    String[]
}

model subscriptions {
  id         String   @id @unique @default(uuid())
  customerId String
  storeId    String
  productId  String
  status     String
  createdAt  DateTime @default(now())
  testmode   Boolean
  priceId    String
}

model customers {
  id        String   @id @unique @default(uuid())
  storeId   String
  name      String
  payments  String[]
  createdAt DateTime @default(now())
  testmode  Boolean
}

model webHooks {
  id         String   @id @unique @default(uuid())
  testMode   Boolean
  storeId    String
  events     String[]
  webhookUrl String
}

model webHookResponses {
  id          String  @id
  storeId     String
  testMode    Boolean
  response    Json
  webhookUrl  String
  webhookSent Json
}

model apiKeys {
  id        String   @id @unique @default(uuid())
  testKey   Boolean
  scopes    String[]
  isActive  Boolean
  createdAt DateTime @default(now())
  storeId   String
}

model paymentForms {
  id            String   @id @unique @default(uuid())
  storeId       String
  currency      String
  status        String
  createdAt     DateTime @default(now())
  amount        Int
  testmode      Boolean
  trialPeriod   Int?
  cancelUrl     String
  companyName   String
  productNames  Json[]
  successUrl    String
  pricesIds      Json[]
  productIds    Json[]
  collectBilling Boolean
  collectPhone Boolean
}